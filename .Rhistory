library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
ls()
type rm(list=ls())
install.packages("specdata")
setwd("~/Documents/Coursera/specdata")
getwd()
data()
source("pollutantmean.R")
getwd()
directory <- "/Users/heathernadeau/Documents/Coursera/specdata"
directory
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'pollutant' is a character vector of length 1 indicating the name of the
## pollutant for which we will calculate the mean; either 'sulfate' or
## 'nitrate'.
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return the mean of the pollutant across all monitors list in the 'id'
## vector (ignoring NA values)
data = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332) {
data = lapply(id, function(i) read.csv(paste(directory, "/", formatC(i,
width = 3, flag = "0"), ".csv", sep = ""))[[pollutant]])
return(mean(unlist(data), na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant, id = 1:332) {
data = lapply(id, function(i) read.csv(paste(directory, "/", formatC(i,
width = 3, flag = "0"), ".csv", sep = ""))[[pollutant]])
return(mean(unlist(data), na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
directory <- (spectdata)
getwd()
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(file.path(getwd(), directory))
total = 0
observations = 0
for (i in id)
{
if (i <10) {
data <- read.csv(paste("0","0", as.character(i), ".csv", sep=""),  ## for example, if 'id' =7, we get 007.csv
header = T,
na.strings=c("NA","NaN", " "))
}
else if (i>=10 & i<100) {
data <- read.csv(paste("0", as.character(i), ".csv", sep=""),  ## for example, if 'id' = 17, we get 017.csv
header = T,
na.strings=c("NA","NaN", " ")
)
}
else       {
data <- read.csv(paste(as.character(i), ".csv", sep=""),     ## Normal
header = T,
na.strings=c("NA","NaN", " ")
)
}
## getting rid of all the "NA" values and, consequently, all the non-complete ovservations (the ones with at least one NA in row)
data = na.omit(data)
##  cumulative addition of the complete observations
observations = observations + nrow(data)
if (pollutant == "sulfate") {total = total + sum(data$sulfate)}
else {total = total + sum(data$nitrate)}
}
setwd("..")
return (total/observations)
}
pollutantmean("specdata", "sulfate", 1:10)
getwd()
setwd(file.path(getwd(), directory))
pollutantmean <- function(directory, pollutant, id = 1:332)
pollutantmean <- function
]
getwd()
for (i in id)
{}
for
}
directory <- getwd()
pollutantmean <- function(directory, pollutant, id = 1:332)
{}
}
for (i in id) {}
for (i in id) { }
directory
pollutantmean <- function(directory, pollutant, id = 1:332)
}
getwd()
directory
corr <- function(directory, threshold = 0) {
corrsNum <- numeric(0)
nobsDfr <- complete("specdata")
nobsDfr <- nobsDfr[nobsDfr$nobs > threshold, ]
for(cid in nobxDfr$id) {
monDfr <- getmonitor(cid, directory)
corrsNum <- c(corrsNum, cor(monDfr$sulfate, monDfr$nitrate, use = "pairwise.complete.obs"))
}
return(corrsNum)
}
data <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
corrsNum <- numeric(0)
nobsDfr <- complete("specdata")
nobsDfr <- nobsDfr[nobsDfr$nobs > threshold, ]
for(cid in nobxDfr$id) {
monDfr <- getmonitor(cid, directory)
corrsNum <- c(corrsNum, cor(monDfr$sulfate, monDfr$nitrate, use = "pairwise.complete.obs"))
}
return(corrsNum)
}
complete <- function(directory, id = 1:332) {
nobsNum <- numeric(0)
for (cid in id) {
cDfr <- getmonitor(cid, directory)
nobsNum <- c(nobsNum, nrow(na.omit(cDfr)))
}
data.frame(id = id, nobs = nobsNum)
}
corr <- function(directory, threshold = 0) {
corrsNum <- numeric(0)
nobsDfr <- complete("specdata")
nobsDfr <- nobsDfr[nobsDfr$nobs > threshold, ]
for(cid in nobxDfr$id) {
monDfr <- getmonitor(cid, directory)
corrsNum <- c(corrsNum, cor(monDfr$sulfate, monDfr$nitrate, use = "pairwise.complete.obs"))
}
return(corrsNum)
}
complete <- function(directory, id = 1:332) {
nobsNum <- numeric(0)
for (cid in id) {
cDfr <- getmonitor(cid, directory)
nobsNum <- c(nobsNum, nrow(na.omit(cDfr)))
}
data.frame(id = id, nobs = nobsNum)
}
getmonitor <- function(id, directory, summarize = FALSE) {
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(id)), ".csv", sep = "")
rawDfr <- read.csv(fileStr)
if(summarize) {
print(summary(rawDfr))
}
return(rawDfr)
}
Init()
directory
data <- corr(directory, 150)
summary(data)
[1]
cc <- complete("specdata", 54)
pollutantmean<-function(directory, pollutant, id=1:332){}
pollutantmean <- function(directory, pollutant, id=1:332){
files<-dir()
data<-data.frame()
for(i in id)
data<-rbind(data,read.csv(files[i]))
mean<-mean(data[,pollutant], na.rm=TRUE)
setwd("")
mean
}
pollutantmean(directory, "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
setwd()
dir
getwd()
pollutantmean<-function(directory,pollutant,id=1:332){
directory<-/Users/heathernadeau/Documents/Coursera/specdata"
setwd(directory)
files<-dir()
data<-data.frame()
for(i in id)
{
data<-rbind(data,read.csv(files[i]))
}
mean<-mean(data[,pollutant],na.rm=TRUE)
setwd("/Users/heathernadeau/Documents/Coursera/specdata")
mean
}
pollutantmean<-function(directory,pollutant,id=1:332) {
directory<-"/Users/heathernadeau/Documents/Coursera/specdata"
setwd(directory)
files<-dir()
data<-data.frame()
for(i in id)
{
data<-rbind(data,read.csv(files[i]))
}
mean<-mean(data[,pollutant],na.rm=TRUE)
setwd("/Users/heathernadeau/Documents/Coursera")
mean
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
pollutantmean("specdata", "sulfate", 34)
> pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate")
> pollutantmean("specdata", "nitrate", 0)
pollutantmean("specdata", "sulfate", 34)
getwd()
getwd()
corr<-function(directory,threshold=0){
directory<-"/Users/heathernadeau/Documents/Coursera/specdata"
setwd(directory)
files<-dir()
result<-vector("numeric")
id=1:332
for(i in id)
{
temp<-read.csv(files[i])
good<-complete.cases(temp)
temp1<-temp[good,]
if(nrow(temp1)>threshold){
x<-temp1[,2]
y<-temp1[,3]
result<-append(result,cor(x,y))
}
}
setwd("/Users/heathernadeau/Documents/Coursera")
result
}
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cc <- complete("specdata", 54)
print(cc$nobs)
cc <- complete("specdata", c(6, 10, 34, 100, 200, 310))
print(cc$nobs)
boring_function <- function(x) {}
boring_function <- function(x) {
x
}
submit()
source('~/Functions.r')
increment()
increment <- function(number, by = 1) {
number + by
}
increment(5)
increment(5,2)
remainder <- function(num, divisor) {
# Divide num by divisor.
}
remainder(3, 30)
remainder()
remainder <- function(num, divisor)
remainder()
remainder(4)
remainder(3,4)
library(datasets)
data(iris)
?iris
mean(sepal.length, virginica)
sapply(sepal.length, virginica)
sapply(sepal.length, mean)
lapply(Sepal.length, mean)
data(iris)
head(iris)
summary(iris)
mean(iris$Sepal.Length)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris, 2, mean)
apply(iris[. 1:4], 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
debug(ls)
mean(mtcars$cly, 4)
undebug(ls)
undebug(ls)
undebug(ls)
data(iris)
c
mean(iris$Sepal.Length [iris$species=="virginica", na.rm=TRUE])
undebug()
undebug(iris)
undebug(fun)
undebug(ls)
Q
ls()
library(datasets)
data(iris)
mean(iris$Sepal.Length [iris$Species=="virginica"],na.rm = TRUE)
library(datasets)
data(mtcars)
?mtcars
sapply(split(mtcars$hp, mtcars$cyl), mean)
ProgrammingAssignment2 <- read.table("/var/folders/cl/6wy085s97vbbhmm9rrv_l2700000gn/T//RtmpVBx52x/dataeb3149cb66b", header=TRUE, quote="\"")
View(ProgrammingAssignment2)
setwd("~/")
getwd()
$ git clone https://github.com/HeatherNLearns/ProgrammingAssignment2.git
git clone https://github.com/HeatherNLearns/ProgrammingAssignment2.git
setwd("~/Documents/Coursera/ProgrammingAssignment2-master")
getwd()
?ProgrammingAssignment2-master
?cacheMethod
cache()
getwd()
## makeCacheMatrix creates a special matrix object, and then cacheSolve
## calculates the inverse of the matrix.
## If the matrix inverse has already been calculated, it will instead
## find it in the cache and return it, and not calculate it again.
makeCacheMatrix <- function(x = matrix()) {
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
get <- function() x
setinverse<- function(inverse) inv_x <<-inverse
getinverse <- function() inv_x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}cachesolve()
makeCacheMatrix()
## makeCacheMatrix creates a special matrix object, and then cacheSolve
## calculates the inverse of the matrix.
## If the matrix inverse has already been calculated, it will instead
## find it in the cache and return it, and not calculate it again.
makeCacheMatrix <- function(x = matrix()) {
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
get <- function() x
setinverse<- function(inverse) inv_x <<-inverse
getinverse <- function() inv_x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix()
## The function cacheSolve returns the inverse of a matrix A created with
## the makeCacheMatrix function.
## If the cached inverse is available, cacheSolve retrieves it, while if
## not, it computes, caches, and returns it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv_x <- x$getinverse()
if (!is.null(inv_x)) {
message("getting cached inverse matrix")
return(inv_x)
} else {
inv_x <- solve(x$get())
x$setinverse(inv_x)
return(inv_x)
}
}
cacheSolve()
cacheSolve
getwd()
}
## makeCacheMatrix creates a special matrix object, and then cacheSolve
## calculates the inverse of the matrix.
## If the matrix inverse has already been calculated, it will instead
## find it in the cache and return it, and not calculate it again.
makeCacheMatrix <- function(x = matrix()) {
inv_x <- NULL
set <- function(y) {
x <<- y
inv_x <<- NULL
}
get <- function() x
setinverse<- function(inverse) inv_x <<-inverse
getinverse <- function() inv_x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The function cacheSolve returns the inverse of a matrix A created with
## the makeCacheMatrix function.
## If the cached inverse is available, cacheSolve retrieves it, while if
## not, it computes, caches, and returns it.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv_x <- x$getinverse()
if (!is.null(inv_x)) {
message("getting cached inverse matrix")
return(inv_x)
} else {
inv_x <- solve(x$get())
x$setinverse(inv_x)
return(inv_x)
}
}
source('~/Functions.r', echo=TRUE)
source('~/Functions.r')
file.exists()
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
source('~/Functions.r')
